package packForms.packComponents;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Label;
import java.io.IOException;
import java.lang.reflect.Method;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.border.LineBorder;
import javax.tools.Diagnostic;
import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;
import packEntities.Buildings.City;
import packForms.LobbyForm;
import packPlayer.Player;
import packPlayer.PlayerGetter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class PlayerSlot extends javax.swing.JPanel {

    /**
     * Creates new form PlayerSlot
     */
    private Player player = null;
    private String compiledClassName = null;
    private City hq = null;
    private enum status { notReady , compiling, ready };
    private status current = status.notReady;
    private String code = "";
    private Path compiledCode;
    private final LobbyForm mainForm;

    public PlayerSlot(LobbyForm mainForm)
    {
        initComponents();
        this.mainForm = mainForm;
    }
    
    private void Init()
    {
        jPanelColor.setBackground(player.getPlayerColor());
        jtxtPlayerName.setText(player.getPlayerName());
        checkStatus();
        setTemplate();
        checkPlayer();
    }
    private void checkPlayer()
    {
        boolean playerStatus = (player != null);
        jButtonResetCode.setEnabled(playerStatus);
        jButtonSetCode.setEnabled(playerStatus);
        jtxtPlayerName.setEnabled(playerStatus);
    }
    public void setPlayer(Player player)
    {
        if(jPanelColor == null || (this.player != null && this.player.equals(player))) return;
        this.player = player;
        compiledClassName = String.format("CompClass%d", player.getID());
        Init();
    }
    public Player getPlayer() {return player;}
    public Boolean getStatus() {return current == status.ready;}
    public City getHq() { return hq; }
    public void setHq(City hq) { this.hq = hq; }
    private void checkStatus()
    {
        String str;
        Color statusColor = Color.RED;
        switch(current)
        {
            case notReady:
            default:
                str = "Input correct code";
                break;
            case compiling:
                str = "Compiling";
                break;
            case ready:
                str = "Ready";
                statusColor = Color.GREEN;
        }
        jtxtStatus.setText(str);
        jtxtStatus.setBorder(new LineBorder(statusColor, 1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelColor = new javax.swing.JPanel();
        jButtonSetCode = new javax.swing.JButton();
        jtxtStatus = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jtxtPlayerName = new javax.swing.JTextField();
        jButtonResetCode = new javax.swing.JButton();

        jPanelColor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanelColorLayout = new javax.swing.GroupLayout(jPanelColor);
        jPanelColor.setLayout(jPanelColorLayout);
        jPanelColorLayout.setHorizontalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanelColorLayout.setVerticalGroup(
            jPanelColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jButtonSetCode.setText("Set Code");
        jButtonSetCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSetCodeActionPerformed(evt);
            }
        });

        jtxtStatus.setEditable(false);
        jtxtStatus.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setText("Player Name");

        jButtonResetCode.setText("Reset Code");
        jButtonResetCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetCodeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonSetCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtxtStatus)
                            .addComponent(jtxtPlayerName, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonResetCode)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelColor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtPlayerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSetCode)
                    .addComponent(jtxtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonResetCode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void compile()
    {
        current = status.compiling;
        
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        Path dir = null;
        compiledCode = null;
        try{
            //https://blog.frankel.ch/compilation-java-code-on-the-fly/
            //https://gerardnico.com/lang/java/dynamic
            
            //create file with code to compile
            compiledCode = Paths.get(System.getProperty("java.io.tmpdir"),player.getPlayerName());
            if(compiledCode != null && compiledCode.toFile().exists()) compiledCode.toFile().delete();
            else dir = Files.createDirectory(compiledCode);
            
            
            
            
            Path javaSourceFile = Paths.get(compiledCode.normalize().toAbsolutePath().toString(), compiledClassName+".java");
            Files.write(javaSourceFile,code.getBytes());
            
            StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null); // get get menager to add files to compiler
            Iterable<? extends JavaFileObject> compilationUnits = fileManager.getJavaFileObjects(javaSourceFile.toFile());
            DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<JavaFileObject>(); // Diagnostics for fixing the code
            JavaCompiler.CompilationTask task = compiler.getTask(null,fileManager, diagnostics, null, null, compilationUnits); 
            task.call();
            DefaultListModel<String> model = new DefaultListModel<>();
            boolean hasErrors = false;
            for (Diagnostic diagnostic : diagnostics.getDiagnostics())
            {
                model.addElement(String.format("%s : Line %d -> %s",diagnostic.getKind().toString() , diagnostic.getLineNumber() , diagnostic.getMessage(null)));
                if(diagnostic.getKind() == Diagnostic.Kind.ERROR) hasErrors = true;
            }
            if(model.getSize() > 0) 
            {
                JList<String> errorList = new JList(model);
                ErrorListRenderer renderer = new ErrorListRenderer();
                errorList.setCellRenderer(renderer);
                JOptionPane.showMessageDialog(null, errorList,"Compilation errors",JOptionPane.PLAIN_MESSAGE);
            }
            current = hasErrors ? status.notReady : status.ready;
            fileManager.close();
            mainForm.CheckPlayerStatus();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(
                    null,
                    String.format("Error while compiling code of %s\n%s", player.getPlayerName(),e.toString()),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            current = status.notReady;
        }
        finally
        {
            checkStatus();
        }
    }
    public Object getCompiledCode()
    {
        if(compiledCode == null || player == null || hq == null) return null;
        try
        {
            //Create loader for class from URL
            ClassLoader classLoader = packGame.BaseObject.class.getClassLoader();
            URLClassLoader URLclassLoader = URLClassLoader.newInstance(new URL[]{compiledCode.toUri().toURL()},classLoader);
            //Create object
            Class compClass = URLclassLoader.loadClass(compiledClassName);
            Object obj = compClass.getConstructor((Class[])null).newInstance((Object[])null);
            
            //Find and invoke method to set player
            Method tmp = compClass.getMethod("setPlayer",PlayerGetter.class, String.class);
            PlayerGetter pGetter = new PlayerGetter(player);
            String tmpPass = "UshallNotpass";
            tmp.invoke(obj, pGetter , tmpPass);
            //Find and invoke method to set starting city
            compClass.getMethod("setHq",new Class[]{City.class, String.class}).invoke(obj, new Object[]{hq, "UshallNotpass"});
            return obj;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, e.toString());
            return null;
        }
    }
    
    private void setTemplate()
    {
        try{
            URL url = getClass().getResource("CodeInputBaseForm.txt");
            Path dest = Paths.get(url.toURI());
            code = new String(Files.readAllBytes(dest));
            code = code.replace("CompiledClass", compiledClassName);
            current = status.notReady;
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, new Label(e.toString()), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private void jButtonSetCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSetCodeActionPerformed
        JTextArea codeArea = new JTextArea(code);
        JScrollPane scrollPane = new JScrollPane(codeArea)
        {
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(400, 300);
            }
            
        };
        int result = JOptionPane.showConfirmDialog(null, scrollPane, "Input your code", JOptionPane.OK_CANCEL_OPTION);
        code = codeArea.getText();
        code = code.replace("CompiledClass", compiledClassName);
        if(result == JOptionPane.OK_OPTION) compile();
    }//GEN-LAST:event_jButtonSetCodeActionPerformed

    private void jButtonResetCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetCodeActionPerformed
        setTemplate();
        checkStatus();
    }//GEN-LAST:event_jButtonResetCodeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonResetCode;
    private javax.swing.JButton jButtonSetCode;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelColor;
    private javax.swing.JTextField jtxtPlayerName;
    private javax.swing.JTextField jtxtStatus;
    // End of variables declaration//GEN-END:variables
}
