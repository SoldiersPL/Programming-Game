package packForms;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
import java.awt.HeadlessException;
import java.awt.Point;
import java.io.File;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import packEntities.EntityDescriptor;
import packMap.*;
import packForms.packComponents.NewMap;
import packForms.packComponents.TerrainListRenderer;
import packMap.Terrain.StartingHex;
import packPlayer.Player;
public class MapEditorForm extends BaseForm {

    /**
     * Creates new form MapEditorForm
     */
    DefaultListModel<Hex> terrains = new DefaultListModel<>();
    StartingHex startingHexDelegate;
    boolean players[] = new boolean[Player.maxPlayerCount];
    boolean fullHouse = false;
    boolean processingClick = false; // in case of very fast clicks
    public MapEditorForm() {
        super();
        initForm();
    }

    public MapEditorForm(JFrame prev) throws HeadlessException {
        super(prev);
        initForm();
    }
    private void initForm()
    {
        initComponents();
        hexMap.setColumns(6);
        hexMap.setRows(6);
        InitFileChoosers();
        InitTerrainList();
    }
    
    private void InitFileChoosers()
    {
        //set default directory to one where this program was launched
        File home = new File(System.getProperty("user.dir") + "/maps");
        if(! home.exists()) home.mkdir();
        jFileChooserLoad.setCurrentDirectory(home);
        jFileChooserSave.setCurrentDirectory(home);
        //set filter
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Map files", "map");
        jFileChooserLoad.setFileFilter(filter);
        jFileChooserSave.setFileFilter(filter);
    }
    private void InitTerrainList()
    {
        jListTerrains.setModel(terrains);
        jListTerrains.setCellRenderer(new TerrainListRenderer());
        Set<String> types = Hex.getKeys();
        for(String i : types)
        {
            Hex tmp = Hex.makeHex(i, null, 0, 0);
            if( tmp.toString().equals("Starting Hex"))
            {
                startingHexDelegate = (StartingHex)tmp;
                SetCurrentPlayer();
            }
            terrains.addElement(tmp);
        }
        jListTerrains.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooserSave = new javax.swing.JFileChooser();
        jFileChooserLoad = new javax.swing.JFileChooser();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        hexMap = new packMap.HexagonalMap();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListTerrains = new javax.swing.JList<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuNew = new javax.swing.JMenuItem();
        jMenuLoad = new javax.swing.JMenuItem();
        jMenuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuClear = new javax.swing.JMenuItem();

        jFileChooserSave.setAcceptAllFileFilterUsed(false);
        jFileChooserSave.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);

        jFileChooserLoad.setAcceptAllFileFilterUsed(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(250);

        hexMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hexMapMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout hexMapLayout = new javax.swing.GroupLayout(hexMap);
        hexMap.setLayout(hexMapLayout);
        hexMapLayout.setHorizontalGroup(
            hexMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 247, Short.MAX_VALUE)
        );
        hexMapLayout.setVerticalGroup(
            hexMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(hexMap);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jSplitPane2.setDividerLocation(165);
        jSplitPane2.setDividerSize(3);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jButtonSave.setText("Save");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jButton3.setText("Exit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(jButtonClear, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane2.setRightComponent(jPanel1);

        jScrollPane3.setViewportView(jListTerrains);

        jSplitPane2.setLeftComponent(jScrollPane3);

        jSplitPane1.setRightComponent(jSplitPane2);

        jMenu1.setText("File");

        jMenuNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, 0));
        jMenuNew.setText("New");
        jMenuNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuNewActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuNew);

        jMenuLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        jMenuLoad.setText("Load");
        jMenuLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuLoadActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuLoad);

        jMenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuSave.setText("Save");
        jMenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSave);
        jMenu1.add(jSeparator1);

        jMenuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuExit.setText("Exit");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuClear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        jMenuClear.setText("Clear");
        jMenuClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuClearActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuClear);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resetScrollBarPosition()
    {
        jScrollPane1.getVerticalScrollBar().setValue(0);
        jScrollPane1.getHorizontalScrollBar().setValue(0);
        jScrollPane1.revalidate();
    }
    
    private void jMenuNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuNewActionPerformed
        NewMap panel = new NewMap();
        int result = JOptionPane.showConfirmDialog(
                null,
                panel,
                "New Map",
                JOptionPane.YES_NO_OPTION);
        if(result == JOptionPane.YES_OPTION)
            hexMap.setMapSize(panel.getColumns(), panel.getRows());
        resetScrollBarPosition();
        ResetPlayers();
        SetCurrentPlayer();
    }//GEN-LAST:event_jMenuNewActionPerformed

    private void jMenuLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuLoadActionPerformed
        int result = jFileChooserLoad.showOpenDialog(null);
        if(result != JFileChooser.APPROVE_OPTION) return;
        File targetFile = jFileChooserLoad.getSelectedFile();
        //check if file exists, if it do, can program read it?
        if (!(targetFile.exists() && targetFile.canRead())) return;
        Hex[][] map = packMap.fileOperations.Load(jFileChooserLoad.getSelectedFile());
        
        hexMap.setMap(map);
        ResetPlayers();
        for(int i = 0; i< map.length ; ++i)
        {
            for(int j = 0; j< map[0].length ; ++j)
            {
                Hex hex = map[j][i];
                if(hex.getFreeSlots() < hex.InitSlots())
                {
                    for(EntityDescriptor e : hex.getEntities())
                    {
                        int playerID = Player.getIDbyPlayerColor(e.getPlayerColor());
                        players[playerID] = true;
                    }
                }
            }
        }
        SetCurrentPlayer();
        resetScrollBarPosition();
    }//GEN-LAST:event_jMenuLoadActionPerformed

    private void SaveMap()
    {
        int result = jFileChooserSave.showSaveDialog(null);
        if(result != JFileChooser.APPROVE_OPTION) return;
        File targetFile = jFileChooserSave.getSelectedFile();
        //check if file exists, if it do, can program write on it?
        if (targetFile.exists() && ! targetFile.canWrite()) return;
        Hex[][] map = hexMap.getMap();
        String path = targetFile.getPath();
        if(!path.endsWith(".map")) path += ".map";
        packMap.fileOperations.Save(new File(path), map);
    }
    
    private void ResetPlayers()
    {
        for(int i = 0 ; i < players.length ; ++i ) players[i] = false;
    }
    
    private void SetCurrentPlayer()
    {
        int ID = players.length;
        for(int i = 0; i < players.length ; ++i)
        {
            if(!players[i])
            {
                ID = i;
                break;
            }
        }
        if(ID < Player.maxPlayerCount)
        {
            packPlayer.Player player = new packPlayer.Player("Player " + ID, ID);
            startingHexDelegate.setPlayer(player);
            fullHouse = false;
        }
        else fullHouse = true;
    }
    private void jMenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveActionPerformed
        SaveMap();
    }//GEN-LAST:event_jMenuSaveActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        Back();
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuClearActionPerformed
        hexMap.resetMap();
        resetScrollBarPosition();
        ResetPlayers();
        SetCurrentPlayer();
    }//GEN-LAST:event_jMenuClearActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        hexMap.resetMap();
        resetScrollBarPosition();
        ResetPlayers();
        SetCurrentPlayer();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        SaveMap();
    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void hexMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hexMapMouseClicked
        if(processingClick) return;
        processingClick = true;
        Point coordinates = hexMap.pixelToTile(evt.getX(), evt.getY());
        String terrainType = jListTerrains.getSelectedValue().toString();
        Hex hex = Hex.makeHex(terrainType, hexMap.getMap(), coordinates.x, coordinates.y);
        Hex oldHex = hexMap.getHex(coordinates);
        if(oldHex.toString().equals("Starting Hex"))
        {
            StartingHex tmp = (StartingHex) oldHex;
            players[tmp.getPlayer().getID()] = false;
        }
        if(terrainType.equals("Starting Hex"))
        {            
            StartingHex tmp = (StartingHex) hex;
            tmp.setPlayer(startingHexDelegate.getPlayer());
            if(fullHouse)
            {
                processingClick = false;
                return;
            }
        }
        hexMap.setHex(hex, coordinates);
        players[startingHexDelegate.getPlayer().playerID] = true;
        SetCurrentPlayer();
        processingClick = false;
    }//GEN-LAST:event_hexMapMouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        Back();
    }//GEN-LAST:event_jButton3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private packMap.HexagonalMap hexMap;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JFileChooser jFileChooserLoad;
    private javax.swing.JFileChooser jFileChooserSave;
    private javax.swing.JList<Hex> jListTerrains;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuClear;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuLoad;
    private javax.swing.JMenuItem jMenuNew;
    private javax.swing.JMenuItem jMenuSave;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables
}
